/**

\mainpage The DESERT Underwater Libraries

\image html ./desert.png

@version {{version}}

@authors <b> Project supervisor: </b> Filippo Campagnaro - campagn1@dei.unipd.it

@authors <b> Maintainers: </b> Federico Favaro - federico.favaro@dei.unipd.it, Federico Guerra - federico@guerra-tlc.com, Roberto Francescon - francescon.roberto@gmail.com, Antonio Montanari - montanar@dei.unipd.it

@authors <b> Contributors: </b> <A HREF="https://www1.coe.neu.edu/~sarafalleni/">Sara Falleni</A> - falleni.s@northeastern.edu, Riccardo Tumiati - riccardo.tumiati@studenti.unipd.it, Vincenzo Cimino 

@authors <b> Former contributors and members: </b> Riccardo Masiero, Saiful Azad, Ivano Calabrese, Cristiano Tapparello, Alberto Signori, Loris Brolo, \link Giovanni Giovanni Toso

<br>

\section IntroNotes Introductory notes

\subsection BriefHist Brief history
DESERT Underwater (or briefly DESERT) <b>[1]</b> is a framework to DEsign, SimulatE and Realize Testbeds for Underwater network protocols. The support DESERT offers to these activities comes in two flavors: support to simulations and support to real-life experimentation.

With DESERT, we distribute several network protocols for underwater networking, some of which are the result of our own development, whereas some represent our own understanding of protocols found in the literature.
Among the components of DESERT, some libraries and tools help speed up the transition from simulations to sea trials. The latter is achieved by integrating the commands required to communicate with real modems into specific interface modules. In turn, this allows the user to run protocols in real life by re-using the same protocol code already written for simulations.

DESERT is based on ns2 <b>[2]</b> and NS-MIRACLE <b>[3]</b>. In particular, DESERT follows the modular approach of the latter. Other than network protocols, DESERT provides additional libraries and tools to help simulate underwater networks realistically. These tools include mobility models that reproduce realistic mobility patterns, energy consumption models, and channel models. The most advanced model available is provided via a close interaction between DESERT and WOSS <b>[4]</b>.

The last DESERT version can be cross-compiled for Raspberry PI Zero 2 W and last EvoLogics modem's sandbox. DESERT supports real data transmission via EvoLogics, ahoi modems, and all devices that provide an Ethernet transparent interface (such as Ethernet switches and many commercial optical modems).
Altogether, the many proof-of-concept implementations and complex tests carried out with DESERT so far make DESERT an effective solution for realizing underwater networking experiments by reusing the same protocol code already written for simulations.

DESERT Underwater has been adopted in several real life <A HREF="http://desert-underwater.dei.unipd.it/index.php/field-experiments/">sea-trials</A>. You can find more on brand new <A HREF="http://desert-underwater.dei.unipd.it">website</A> of the project


\subsection NewVer DESERT Release

A considerable amount of work has been done in order to make the installation of the software automatic via a modular installation script, that includes a fully-guided wizard mode.
At the same time, the installation is organized into separate modules. An experienced users can easily extend the process to accommodate specific requirements, new functionalities, or even to make DESERT part of larger projects.
As a further help for users wishing to experiment with real hardware using DESERT, we also provide different installer modules, suitable for different compact/embedded hardware platforms, starting from <A HREF="http://www.raspberrypi.org/">Raspberry Pi</A>, and <A HREF="http://www.evologics.com/">EvoLogics</A> modem sandbox.
This set will be extended in the future.
In order to use DESERT more and more in real environments, uwApplication is provided. This module permits to transmit real payloads among nodes with tunable dimension. Moreover, real data can be transmitted to uwApplication trough a TCP or UDP socket at a given port. Using this feature, you can implement a very simple "underwater chat," or connect a sensor or device that will transmit its data to uwApplication through a socket. uwApplication encapsulates the payload with control headers and delivers packet to the lower layers.
Finally, the functionalities offered by DESERT have been extended with a control framework that provides a set of primitives to remotely control the hardware modems, and thus the network operations.
All these features are released constantly on our <A HREF="https://github.com/uwsignet/DESERT_Underwater">GitHub</A> repository

<br>

\section refs References

<b>[1]</b> R. Masiero, P. Casari, M. Zorzi, "The NAUTILUS project: Physical Parameters, Architectures and Network Scenarios," <i>Proc. MTS/IEEE OCEANS</i>, Kona, HI, 2011.

<b>[2]</b> The Network Simulator - ns2. http://nsnam.isi.edu/nsnam/index.php/Main_Page

<b>[3]</b> N. Baldo, M. Miozzo, F. Guerra, M. Rossi, and M. Zorzi, "Miracle: the multi-interface cross-layer extension of ns2," EURASIP J. of Wireless Commun. and Networking, 2010. [Online]. Available: http://www.hindawi.com/journals/wcn/aip.761792.html

<b>[4]</b> WOSS - World Ocean Simulation System. https://woss.dei.unipd.it

<b>[5]</b> EvoLogics GmbH web site. http://www.evologics.de/

<b>[6]</b> Woods Hole Oceanographic Institution web site. http://www.whoi.edu/

<b>[7]</b> The Goby Underwater Autonomy Project web site. http://gobysoft.com/

<b>[8]</b> Develogic Subsea Systems. http://www.develogic.de/

<b>[9]</b> W. Liang, H. Yu, L. Liu, B. Li and C. Che, "Information-Carrying Based Routing Protocol for Underwater Acoustic Sensor Network," <i>Proc. ICMA</i>, Takamatsu, Japan, Aug. 2007.

<b>[10]</b> N. Abramson, "Development of the ALOHANET," <i>IEEE Transactions on Information Theory</i>, vol. 31, num. 2, pp. 119-123, 1985.

<b>[11]</b> X. Guo, M. R. Frater and M. J. Ryan, "A propagation-delay-tolerant collision avoidance protocol for underwater acoustic sensor networks," <i>Proc. OES/IEEE OCEANS</i>, Singapore, May 2006.

<b>[12]</b> B. Peleato and M. Stojanovic, "Distance aware collision avoidance protocol for ad-hoc underwater acoustic sensor networks," <i>IEEE Communications Letters</i>, vol. 11, num. 12, pp. 1025-1027, 2007.

<b>[13]</b> F. Favaro, P. Casari, F. Guerra, M. Zorzi, "Data Upload from a Static Underwater Network to an AUV: Polling or Random Access?", <i>Proc. MTS/IEEE OCEANS</i>, Yeosu, South Korea, May 2012.

<b>[14]</b> A. Syed, W. Ye and J. Heidemann, "T-Lohi: A new class of MAC protocols for underwater acoustic sensor networks," <i>IEEE INFOCOM</i>, Phoenix, AZ, Apr. 2008.

<b>[15]</b> S. Azad, P. Casari, M. Zorzi, The Underwater Selective Repeat Error Control Protocol for Multiuser Acoustic Networks: Design and Parameter Optimization," <i>IEEE Transactions on Wireless Communications</i>, vol. 12, no. 10, pp. 4866-4877, Oct. 2013.

<b>[16]</b> F. Favaro, L. Brolo, G. Toso, P. Casari, M. Zorzi, "A Study on Data Retrieval Strategies in Underwater Acoustic Networks", <i>Proc. MTS/IEEE OCEANS</i>, San Diego, CA, Sep. 2013.

<b>[17]</b> C. Tapparello, P. Casari, G. Toso, I. Calabrese, R. Otnes, P. van Walree, M. Goetz, I. Nissen, M. Zorzi, "Performance Evaluation of Forwarding Protocols for the RACUN Network," Proc. of ACM WUWNet, Kaohsiung, Taiwan, Nov. 2013.

<b>[18]</b> B. Liang and Z. Haas, "Predictive distance-based mobility management for PCS networks," <i>Proc. IEEE INFOCOM</i>, New York, NY, Mar. 1999.

<b>[19]</b> F. Campagnaro, R. Francescon, F. Guerra, F. Favaro, P. Casari, R. Diamant, M. Zorzi, "The DESERT underwater framework v2: Improved capabilities and extension tools," <i>Proc. IEEE UCOMMS</i>, Lerici, Italy, Oct. 2016.



  */

/** \page INSTALL1 Installation Guidelines

\section requirements Installation requirements: Ubuntu

Before installing the DESERT framework, please check that your host device has the following packages installed:

<SMALL>
<BLOCKQUOTE>
- build-essential
- autoconf
- automake
- libxmu-dev
- libx11-dev
- libxmu-dev
- libxmu-headers
- libxt-dev
- libtool
- gfortran
- bison
- flex
</BLOCKQUOTE>
</SMALL>

If you are using a Debian-based Linux distribution, you can type this command in a terminal

<small>

    sudo apt-get install build-essential autoconf automake libxmu-dev libx11-dev libxmu-dev libxmu-headers libxt-dev libtool gfortran bison flex

</small>

in order to install all dependencies above.

\section fed-requirements Installation requirements: Fedora

DESERT Underwater was successfully installed on Fedora 23 and following releases. Before installing the DESERT framework in Fedora, please check that your host device has the following packages installed:

<SMALL>
<BLOCKQUOTE>
- C Development Tools and Libraries
- gcc-gfortran
- libXmu-devel
- libX11-devel
- patch
- patchutils
</BLOCKQUOTE>
</SMALL>

Please note that main C develoment tools are installed by installing the package group "C Development Tools and Libraries". To install all the software requirements you can run the following commands in a terminal:

<small>

    dnf groupinstall "C Development Tools and Libraries"

</small>

<small>

    dnf install gcc-gfortran libXmu-devel libX11-devel patch patchutils

</small>

\section install Installation procedures

To install DESERT Underwater, you can choose between two different approaches:

- <i>wizard</i> mode
- <i>command-line</i> mode

The wizard mode implements an interactive installation procedure. As such, it is easier and more user-friendly than the command-line mode.
The command-line mode is recommended for more experienced users.
Note that, after completing an installation with the wizard, you will be also provided a command-line string. You can note down this string and enter it at the command prompt in order to reproduce exactly the same installation steps (with the same options, the same packages installed, etc.). When you become more comfortable with DESERT's installation options, you can also modify the automatically generated command-line string to reflect your desired configuration.

To launch the installation in wizard mode, once you have downloaded and unpacked the framework, you have to cd into the framework folder by using:

<small>

    cd DESERT_Underwater/DESERT_Framework

</small>

set the executable flag of the installer:

<small>

    chmod +x ./install.sh

</small>

and run the installer:

<small>

    ./install.sh --wizard

</small>

The procedure will guide you through 6 steps:

- setting of the installation-target
- setting of the installation mode
- setting of the destination folder
- choice whether or not to install the WOSS libraries
- setting of possible custom parameters (OPTIONAL)
- selection of the addons to be installed (OPTIONAL)

To employ the command-line mode, you need to manually specify all installation settings through the corresponding command-line options. This mode makes it possible to embed the DESERT Underwater installation tool into other custom scripts. For example, if you need to integrate the installation procedure into some more general "installation project", with the "command-line" mode you will find the command-line mode useful.

Here is a list of all options currently available:

<small>

    --help
        Print the help and exit

    --wizard
        Start the installation procedure in wizard mode

    --with-woss
        Only for command-line. Enable the installation of the WOSS libraries

    --without-woss
        Only for command-line. Explicitly disable the installation of the WOSS libraries

    --target <installation-target-name>
        Only for command-line. This options sets the compilation target.
        From the point of view of the installation tool, passing the target option
        is equivalent to choosing the specific installation script to be used after
        the preliminary settings. The installation scripts are located in
        .../DESERT_Underwater/DESERT_Framework/Installation/.
        If you create a custom installation script, you must put it in this folder.
        Targets available:
            - LOCAL
            - Raspberry Pi zero
            - EvoLogics-sandbox-debian_armhf

    --inst_mode <installation-mode>
        Only for command-line. This option sets whether to install in release mode or
        in development mode. In release mode, after the compilation/cross-compilation
        has been completed, the destination folder will contain only the files strictly
        required to run the DESERT libraries (namely, the bin/ and lib/ folders).
        Conversely, the development mode keeps all source files and build sub-products.
        Note that the source folders are part of an active working copy, which you can
        directly use to develop modules, re-compile code without restarting the
        installation process from scratch, and commit updates to the source code.
        Installation-modes available:
           - development
           - release

    --dest_folder <destination-folder-path>
        Only for command-line. This option sets where the installation procedure will
        put all files generated during the compilation process.

    --addons <list-of-the-DESERT-addons>
        Only for command-line. This option specifies which addons to Desert Underwater
        should be installed. The available addons are usually found in
        .../DESERT_Underwater/DESERT_Addons/
        The <list-of-the-DESERT-addons> parameter is composed by the names of any addons
        separated by a white space and enclosed in quotes, e.g.,
        "ADDON1 ADDON2 ADDON3"

    --custom_par <list-of-parameters>
        Only for command-line. This option provides a useful means of passing a variable
        list of parameters to a custom installation script. The list-of-parameters is
        composed by all parameters, separated by a white space and enclosed in quotes,
        e.g.,
        "param1 param2 param3"

</small>

If you encounter any problem while building this library, you can refer to github and open a dedicated issue, that we will investigate

<br>

\section todoafter After the installation has been completed

When the installation of DESERT Underwater has been successfully completed, you need to update your environment variables by exporting the paths to the bin/ and lib/ folders created in the path specified during the installation. This is required in order to correctly use DESERT and its dependencies (ns, ns-miracle, etc.).
This operation is made simpler via the <i>environment</i> file generated at the end of the installation session in the <destination-folder-path> only for the "development" installation-mode. So, by running the following command:

<small>

    source <destination-folder-path>/environment

</small>

you will be able to call <i>ns</i> and all compiled libraries directly in the shell where you ran the above command. You may want to check the <i>environment</i> script to see what it exactly does.
<br>
With the "release" installation-mode, instead, you can set the environment via the following command:

<small>

    cd <destination-folder-path> && ./make_environment.sh

</small>

before updating your environment variables. The "make_environment.sh" script is particularly useful after the DESERT framework has been cross-compiled and copied into the target device: in this case, the script dynamically generates the environment file in agreement with the destination folder path within the target device.
<br>

*/

/** \page CROSS-COMPILE-RPI How to cross-compile DESERT for Raspberry Pi Zero
\section CROSS-COMPILE-RPI-bare  Cross-compilation on Debian/Ubuntu workstation
To download the appropriate toolchain, you can use the script provided inside

<small>

    .../DESERT_Framework/Installer/make-rpi-toolchain.sh

</small>

<BLOCKQUOTE>
NOTE: this script requires sudo capabilities and workstation should be connected to the internet.
</BLOCKQUOTE>

After script correctly finished, you can compile DESERT for Raspberry Pi Zero selecting the appropriate arch and selecting *"release"* modality when asked during wizard procedure in order not to copy unnecessary files.


<small>

    ./install.sh --target Raspberry-Pi-zero-Raspbian --inst_mode release --dest_folder /home/yourhome/DESERT_Underwater/DESERT_buildCopy_Raspberry-Pi-zero-Raspbian

</small>

After installation has been correctly completed, you can copy *_buildCopy* folder inside your Raspberry, source the environment files and run you tcl files inside the Raspberry.

<small>

    scp -r /home/yourhome/DESERT_Underwater/DESERT_buildCopy_Raspberry-Pi-zero-Raspbian pi@<your-raspi-ip-address>:~

</small>

you can now get access via ssh to your Raspberry and source the DESERT env file in order to setup PATH and LD_LIBRARY_PATH variables

<small>

    ssh root@<your-modem-ip-address>
    source .../DESERT_buildCopy_Raspberry-Pi-zero-Raspbian/environment

</small>


\section CROSS-COMPILE-RPI-docker Use docker

In order to simplify the cross-compilation process, a Dockerfile is present in .../DESERT_Framework/Docker/xcompile folder, which prepares for you the right environment to cross-compile DESERT on Raspberry

<BLOCKQUOTE>
NOTE: The following section requires Docker to be installed and working on workstation
</BLOCKQUOTE>

You have to first build your docker image

<small>

    docker build --network=host -t desert/raspi-zero-cross:latest -f Dockerfile-Raspberry-Pi-Zero .

</small>

You can now use the just built docker image to run a container and build DESERT inside it. To run that container you can use the provided script inside .../DESERT_Framework/Docker/xcompile


<small>

    ./docker-init.sh desert/raspi-zero-cross:latest

</small>

You will have a shell inside the running container with DESERT framework mounted on its filesystem, and you can now proceed to compile DESERT as in the previous section. At the end of the installation,
you can exit the docker container shell (container will now die) and copy the *_buildCopy* folder inside your Raspberry, as explained in the previous section


*/

/** \page CROSS-COMPILE-EVO How to cross-compile DESERT for EvoLogics ARM Debian Sandbox
\section CROSS-COMPILE-EVO-bare  Cross-compilation on Debian/Ubuntu workstation
To download and setup the appropriate toolchain, you can use the following commands (*validated on Debian 11 and Ubuntu 22.04*)

<small>

    dpkg --add-architecture armhf
    apt-get update
    apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

</small>

<BLOCKQUOTE>
NOTE: These commands requires sudo capabilities and workstation should be connected to the internet.
</BLOCKQUOTE>

After script correctly finished, you can compile DESERT for EvoLogics sandbox selecting the appropriate arch and selecting *"release"* modality when asked during wizard procedure in order not to copy unnecessary files.

<small>

    ./install.sh --target EvoLogics-sandbox-debian_armhf --inst_mode release --dest_folder /home/yourhome/DESERT_Underwater/DESERT_buildCopy_EvoLogics-sandbox-debian_armhf

</small>

After installation has been correctly completed, you can copy *_buildCopy* folder inside your EvoLogics modem, source the environment files and run you tcl files inside the EvoLogics modem's sandbox

<small>

    scp -r /home/yourhome/DESERT_Underwater/DESERT_buildCopy_EvoLogics-sandbox-debian_armhf root@<your-modem-ip-address>:~

</small>

you can now get access via ssh to your modem sandbox and source the DESERT env file in order to setup PATH and LD_LIBRARY_PATH variables

<small>

    ssh root@<your-modem-ip-address>
    source .../DESERT_buildCopy_EvoLogics-sandbox-debian_armhf/environment

</small>


\section CROSS-COMPILE-EVO-docker Use docker

In order to simplify the cross-compilation process, a Dockerfile is present in .../DESERT_Framework/Docker/xcompile folder, which prepares for you the right environment to cross-compile DESERT for Evologics modem sandbox

<BLOCKQUOTE>
NOTE: The following section requires Docker to be installed and working on workstation
</BLOCKQUOTE>

You have to first build your docker image

<small>

    docker build --network=host -t evologics/desert-cross-compile:latest -f Dockerfile-EvoLogics-sandbox .

</small>

You can now use the just built docker image to run a container and build DESERT inside it. To run that container you can use the provided script inside .../DESERT_Framework/Docker/xcompile


<small>

    ./docker-init.sh evologics/desert-cross-compile:latest

</small>

You will have a shell inside the running container with DESERT framework mounted on its filesystem, and you can now proceed to compile DESERT as in the previous section. At the end of the installation,
you can exit the docker container shell (container will now die) and copy the *_buildCopy* folder inside your EvoLogics modem, as explained in the previous section

*/

/** \page DEV Developer guide

\section DESMod Structure of a DESERT module

Each DESERT module derives either from another DESERT or ns-miracle module (e.g., UnderwaterPhysical derives from ns2-miracle UnderwaterMPhyBpsk) or from the base ns2-miracle Module class. In order to use it with tcl, in the cpp file you always need to create a static class that derives from TclClass and gives the name that will be used from tcl to create and bind an object of that module. For instance UnderwaterPhysical is “converted” in tcl using the following class

<small> 

    static class UwPhysicalClass : public TclClass
    {
    public:
        UwPhysicalClass()
            : TclClass("Module/UW/PHYSICAL")
        {
        }
        TclObject *
        create(int, const char *const *)
        {
            return (new UnderwaterPhysical);
        }
    } class_module_uwphysical;

</small>

The name "Module/UW/PHYSICAL" is the one that will be used in TCL to create and bind objects of type UnderwaterPhysical.

You can pass variables to and from tcl script and C++ class, by means of bind function, inside the constructor of your module class.
To bind a variable you need to use the bind function inside the constructor of your module class. 
In example,  in UnderwaterPhysical we bind the rx_power_ with 
bind("rx_power_consumption_", &rx_power_);
All bound variables need to be initialized to a default value in the *-defaults.tcl inside your folder.

Another way to communicate with the tcl script is to overwrite the command method, for example to get and set parameters of a module object. For more details, just check the UnderwaterPhysical::command method. It is usually best practice to call the father class’ command method at the end.

\section HowTo How to add a new custom installer

First of all, enter the installation folder:

<small>

    cd .../DESERT_Underwater/DESERT_Framework/Installation/

<BLOCKQUOTE>
NOTE: When you see a pathname preceded by three dots, this refers to a well-known but unspecified top-level directory. The top-level directory is context-dependent, but almost universally refers to top-level DESERT source directory. For example, <tt>.../DESERT_Underwater/DESERT_Framework/Installer/installDESERT_PC.sh</tt> refers to the <tt>installDESERT_PC.sh</tt> file located in the architecture branch of a DESERT framework source tree.
The actual path might be something like <tt>/home/foo/DESERT_Underwater/DESERT_Framework/Installer/installDESERT_PC.sh</tt>.
</BLOCKQUOTE>
</small>

At this point, create a new script. We suggest to copy an existing installation script (e.g. <tt>installDESERT_PC.sh</tt>):

<small>

    cp installDESERT_PC.sh installDESERT_<your-custom-installation-target>.sh

</small>

Please note the <tt><your-custom-installation-target></tt> label: this will be the same parameter you will pas later as an option to the installation script when indicating which installation-target to choose. We remark that these steps are very easy but also very important, since the only way to call the correct installation script for <tt><your-custom-installation-target></tt> is that the script <tt>installDESERT_<your-custom-installation-target>.sh</tt> exists in the folder <tt>.../DESERT_Underwater/DESERT_Framework/Installation/</tt>

Let us now have a deeper look at the script. We focus first on the main block:

<small>

    main() {
        #******************************************************************************
        # MAIN
        #     e.g handle_package host/target <pkt-name>
        #     e.g addon_installation_list host/target <addon-list>

        ## only for the cross-compilation session
        export CROSS_ENV_DIR=""
        export CROSS_ENV_FILE=""
        #*

        handle_package host ZLIB
        handle_package host TCL
        export PATH="${BUILD_HOST}/bin:$PATH"
        export LD_LIBRARY_PATH="${BUILD_HOST}/lib"
        handle_package host OTCL
        handle_package host TCLCL
        handle_package host NS
        handle_package host NSMIRACLE
        handle_package host DESERT
        if [ ${WITHWOSS} -eq 1 ]; then
            handle_package host NETCDF
            handle_package host NETCDFCXX
            handle_package host BELLHOP
            handle_package host WOSS
        fi
        if [ ! -z "${ADDONS}" ]; then
            addon_installation_list host "${ADDONS}"
        fi
        #******************************************************************************
    }

</small>

Notice the "host" directive. This tells the installation script to compile the
libraries for the current host. If you need to modify this script to cross-compile
for a different target, substitute all lines with the following ones:

<small>

    main() {
        #******************************************************************************
        # MAIN
        #     e.g handle_package host/target <pkt-name>
        #     e.g addon_installation_list host/target <addon-list>

        ## only for the cross-compilation session
        export CROSS_ENV_DIR="<YOUR/ENVIRONMENT/FOLDER/PATH>"
        export CROSS_ENV_FILE="${CROSS_ENV_DIR}/environment"
        #*

        handle_package host/target ZLIB
        handle_package host/target TCL
        export PATH="${BUILD_HOST}/bin:$PATH"
        export LD_LIBRARY_PATH="${BUILD_HOST}/lib"
        handle_package host/target OTCL
        handle_package host/target TCLCL
        handle_package target NS
        handle_package target NSMIRACLE
        handle_package target DESERT
        if [ ${WITHWOSS} -eq 1 ]; then
            #handle_package target NETCDF
            #handle_package target NETCDFCXX
            #handle_package target BELLHOP
            #handle_package target WOSS
            warn_L1 "The WOSS libreries wont be installed!"
        fi
        if [ ! -z "${ADDONS}" ]; then
            addon_installation_list target "${ADDONS}"
        fi
        #******************************************************************************
    }

</small>

With these changes we instructed the installer to compile some modules only for the
host ("host" directive), some for both the host and the target ("host/target"
directive) and the remaining ones only for the target ("target" directive).
This step is crucial, because some libraries must be compiled for the host,
in order to correctly cross-compile DESERT and its addons for
<tt><your-custom-installation-target></tt>.

<small>

    WARNING: be careful NOT TO CONFUSE the directive "target" with "<tt><your-custom-installation-target></tt>".
             The former is just a directive to the <tt>handle_package</tt> function of the installation script.

</small>

We remark that you need the <b>TOOLCHAIN</b> of <tt><your-custom-installation-target></tt> in order to
correctly complete the installation.

\section newmod How to add a new DESERT module

In this section we describe how to add a new module in the DESERT core (i.e., into the DESERT_Framework/DESERT directory.) 
As an example we present the creation of a new module (i.e., a library containing a new DESERT module) named uwcool_phy. The procedure to create a new module is described as follows:
- The folder structure aims to follow ISO/OSI structure. Identify where your module can be logically placed and give  it a name ( i.e., our new uwcool_phy physical layer module should stay inside  DESERT_Framework/DESERT/physical, therefore you need to create a folder DESERT_Framework/DESERT/physical/uwcool_phy: this folder will contain your new library.
- Add your .h and .cpp files containing your class definition, called, for instance UwCoolPhy: this point will be discussed more in detail later.
- Add the file initlib.cpp: this file is really standard and you can use an existing one (i.e., an existing physical layer module) as an example.
This is the file that make “the connection” between the C++ library of your module and the tcl representing your scenario under simulation/emulation. You need to define an extern variable representing an EmbeddedTcl object, which has a specific name structure: <ModuleNameInCameCase><InitTclCode>.
You need also to define a function with fixed naming, which is the name of your module with the first capital letter and _Init suffix
Following our example, the variable should be named UwCoolPhyInitTclCode and the function should be Uwcoolphy_Init. Some of those initlib files has also support to Cygwin. If you are not planning to use it, you can get rid of it.
- Add the tcl for default initialization, called uwcool-phy-default.tcl, which will contain the initialization of your tcl binded variables. You can take a look at uwphysical module to have an example of it
- Add to your folder the internal Makefile.am: here there should be the definition of your library. The name of your library should always contain lib prefix, i.e. libuwcoolphy. Since the structure of the Makefiles is really standard you can take, for example, the uwphysical module’s one and modify some parts of it:
the word libuwphysical should be changed EVERYWHERE with the name of your library, e.g., libuwcoolphy
the word UwPhysicalInitTclCode should be changed to UwCoolPhyInitTclCode 
the list of sources (libuwcool_phy_la_SOURCES) should contain only the cpp files located in the uwcool_phy folder
the TCL_FILES should be equal to uwcool-phy-default.tcl
- Modify top-level Makefile.am and configure.ac: DESERT compilation and linking is based on autotools, hence to add a new library you need to modify and DESERT_Framework/DESERT/Makefile.am and DESERT_Framework/DESERT/configure.ac as follows:
    1. Makefile.am: we need to add our folder to the subdirectories list (SUBDIS) using \ as a separator
<small>

    … \
        physical/uwcool_phy

</small>
    2. configure.ac: we need to add our new folder to the CPPFLAGS and tell autoconf (AC_CONFIG_FILES) where the new internal Makefile is
<small>

    […]
    DESERT_CPPFLAGS="$DESERT_CPPFLAGS "'-I$(top_srcdir)/physical/uwcool_phy'
    […]
    AC_CONFIG_FILES=([
    [...]
    physical/uwcool_phy
    [...]
    ])

</small>

\section newaddon How to add a new DESERT Add-on

In this section we describe how to add a new module as a DESERT add-on, inside the folder DESERT_Addons. An addon is an external autotools project that depends on DESERT, ns2miracle and, in some cases, WOSS, so we don’t need to modify the DESERT toplevel Makefile.am and configure.ac, but we need to create just the addon internal Makefile.am and a dedicated configure.ac with m4 folder to resolve the dependencies. The complete procedure is described as follows.
- Add your folder inside DESERT_Addons/
- Add your .h and .cpp files like in point 2 of the previous section
- Add iniltib.cpp like in point 3 of the previous section
- Add the tcl file for the default initialization of your module like in point 3 of the previous section
- Add the Makefile.am like in point 5 of the previous section
- add in your folder the file autogen.sh: you can copy and paste is from another addon: this file should not be modified
- copy from another addon the file configure.ac and modify the AC_INIT writing the name of your module, e.g., . In the case your module uses WOSS, copy the configure.ac from an addon that uses WOSS as well (e.g., wossgmmob3D), otherwise copy it from an addon that does not (e.g., one of the packer)
- copy the folder m4 from another addon
- inside the folded m4, change desert.m4 according to the DESERT dependencies of your module. e.g., you need to list in dir and in lib the directories and libraries your module uses.
- in the case your module uses some woss dependencies, you need to do the same with woss.m4

\section newheader How to add a new Packet headers

In the case your module needs its own packet header, a few things need to be performed:
define a header struct, for example hdr_MY inside a file my_hdr.h with your parameters plus the following members:

<small>

    public static int offser_ member 
    inline static int& offset() {return offset_;}
    inline static struct hdr_MY * access(const Packet *p) { 
    return (struct hdr_MY *) p->access(offset_); 
    }

</small>

to simplify the access of your header from the packet, at the beginning of the source file where your header is defined you can define a macro

<small>

    define HDR_MY(p) (hdr_MY::access(p))

</small>

just after the macro, at the beginning of the file, you need to define a new packet type with 

<small>

    extern packet_t PT_MY;

</small>

Inside initlib.cpp you need to 

- add a static class

<small>

    static class MY_HeaderClass : public PacketHeaderClass
    {
    public:
        MY_HeaderClass()
            : PacketHeaderClass("PacketHeader/MY", sizeof(hdr_MY))
        {
            this->bind();
            bind_offset(&hdr_MY::offset_);
        }
    } class_MY_HeaderClass;


</small>

- add the packet in the init function (before the load), using the same name of the extern

<small>

    PT_MY = p_info::addPacket("UWPROTOCOL/MY");

</small>

where PROTOCOL is the name of the protocol

Finally, inside the *-default.tcl you need to add the packet to the packet manager, with

<small>

    PacketHeaderManager set tab_(PacketHeader/MY) 1

</small>

This last step is really important to have the right memory allocation done. Missing it could lead to unpredictable behavior, usually really hard to troubleshoot.






*/

\page ack Acknowledgments

This software has been developed by the SIGNET Lab, Department of Information Engineering, University of Padova, Italy.

This work has been supported in part by the Italian Institute of Technology within the Project SEED framework (NAUTILUS project). The development of the SUN and UW-Polling protocols has been supported in part by the European Commission 7th framework programme (G.A. 258359 - CLAM project).

The SIGNET Lab gratefully thanks EvoLogics GmbH and the Woods Hole Oceanographic Institution for their precious help and technical support.

Grateful thanks also go to the many collaborations that helped develop part of the DESERT Underwater libraries, including the NATO Undersea Research Centre (NURC), the Scripps Institution of Oceanography, the Johns Hopkins University Applied Physics Laboratory the US Office of Naval Research and the US National Science Foundation.

*/

/**
* \page License License Terms
//
// Copyright (c) 2022 Regents of the SIGNET lab, University of Padova.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:

* 1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

* 2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

* 3. Neither the name of the University of Padova (SIGNET lab) nor the
     names of its contributors may be used to endorse or promote products
     derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
*/


/** \page Giovanni In memory of Giovanni Toso

DESERT Underwater has been put together, tested, improved, and expanded over time also thanks to the continuous efforts of our beloved colleague and friend Giovanni Toso, who prematurely passed away in a car accident on August 10, 2014. DESERT 3.0 is the first major release after Giovanni's death, and is dedicated to his memory.

\image html ./giovanni.jpeg

*/
